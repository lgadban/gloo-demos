alertRelabelConfigs: null
alertmanager:
  affinity: {}
  baseURL: /
  configFileName: alertmanager.yml
  configFromSecret: ""
  configMapOverrideName: ""
  enabled: true
  extraArgs: {}
  extraEnv: {}
  extraSecretMounts: []
  image:
    pullPolicy: IfNotPresent
    repository: prom/alertmanager
    tag: v0.18.0
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    extraPaths: []
    hosts: []
    tls: []
  name: alertmanager
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    subPath: ""
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  prefixURL: ""
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
  statefulSet:
    enabled: false
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
    podManagementPolicy: OrderedReady
  tolerations: []
alertmanagerFiles:
  alertmanager.yml:
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
configmapReload:
  extraArgs: {}
  extraConfigmapMounts: []
  extraVolumeDirs: []
  image:
    pullPolicy: IfNotPresent
    repository: jimmidyson/configmap-reload
    tag: v0.2.2
  name: configmap-reload
  resources: {}
extraScrapeConfigs: null
imagePullSecrets: null
kubeStateMetrics:
  args: {}
  enabled: true
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/coreos/kube-state-metrics
    tag: v1.6.0
  name: kube-state-metrics
  nodeSelector: {}
  pod:
    labels: {}
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations:
      prometheus.io/scrape: "true"
    clusterIP: None
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP
  tolerations: []
networkPolicy:
  enabled: false
nodeExporter:
  enabled: true
  extraArgs: {}
  extraConfigmapMounts: []
  extraHostPathMounts: []
  hostNetwork: true
  hostPID: true
  image:
    pullPolicy: IfNotPresent
    repository: prom/node-exporter
    tag: v0.18.0
  name: node-exporter
  nodeSelector: {}
  pod:
    labels: {}
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ""
  resources: {}
  securityContext: {}
  service:
    annotations:
      prometheus.io/scrape: "true"
    clusterIP: None
    externalIPs: []
    hostPort: 9100
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9100
    type: ClusterIP
  tolerations: []
  updateStrategy:
    type: RollingUpdate
podSecurityPolicy:
  enabled: false
pushgateway:
  enabled: true
  extraArgs: {}
  image:
    pullPolicy: IfNotPresent
    repository: prom/pushgateway
    tag: v0.8.0
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    hosts: []
    tls: []
  name: pushgateway
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    subPath: ""
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ""
  replicaCount: 1
  resources: {}
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations:
      prometheus.io/probe: pushgateway
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9091
    type: ClusterIP
  tolerations: []
rbac:
  create: true
server:
  affinity: {}
  baseURL: ""
  configMapOverrideName: ""
  configPath: /etc/config/prometheus.yml
  emptyDir:
    sizeLimit: ""
  enableAdminApi: false
  enabled: true
  env: {}
  extraArgs: {}
  extraConfigmapMounts: []
  extraHostPathMounts: []
  extraInitContainers: []
  extraSecretMounts: []
  extraVolumeMounts: []
  extraVolumes: []
  global:
    evaluation_interval: 1m
    scrape_interval: 1m
    scrape_timeout: 10s
  image:
    pullPolicy: IfNotPresent
    repository: prom/prometheus
    tag: v2.13.1
  ingress:
    annotations: {}
    enabled: false
    extraLabels: {}
    extraPaths: []
    hosts: []
    tls: []
  livenessProbeInitialDelay: 30
  livenessProbeTimeout: 30
  name: server
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    subPath: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityPolicy:
    annotations: {}
  prefixURL: ""
  priorityClassName: ""
  readinessProbeInitialDelay: 30
  readinessProbeTimeout: 30
  replicaCount: 1
  resources: {}
  retention: 15d
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    annotations: {}
    clusterIP: ""
    externalIPs: []
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
  sidecarContainers: null
  skipTSDBLock: false
  statefulSet:
    annotations: {}
    enabled: false
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
    labels: {}
    podManagementPolicy: OrderedReady
  terminationGracePeriodSeconds: 300
  tolerations: []
serverFiles:
  alerts: {}
  prometheus.yml:
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
  rules: {}
serviceAccounts:
  alertmanager:
    create: true
    name: null
  kubeStateMetrics:
    create: true
    name: null
  nodeExporter:
    create: true
    name: null
  pushgateway:
    create: true
    name: null
  server:
    create: true
    name: null
